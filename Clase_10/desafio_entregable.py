print('Desafio entregable \n')
#1) Realiza una funci칩n llamada area_rectangulo() que devuelva el 
# 치rea del rect치ngulo a partir de una base y una altura. 
# Calcula el 치rea de un rect치ngulo de 15 de base y 10 de altura

print('\n츼REA DEL RECT츼NGULO')
print('========================')

def area_rectangulo() :
    base = 15
    altura = 10

    area = base * altura

    return area

resultado = area_rectangulo()
print(resultado)

#2) Realiza una funci칩n llamada area_circulo() que devuelva el 치rea de un c칤rculo a 
# partir de un radio. Calcula el 치rea de un c칤rculo de 5 de radio

#游둟 Ayuda: El 치rea de un c칤rculo se obtiene al elevar el radio a dos y multiplicando el 
# resultado por el n칰mero pi. Puedes utilizar el valor 3.14159 como pi o importarlo del 
# m칩dulo math.

print('\n츼REA DEL C칈RCULO')
print('========================')

import math

def area_circulo() :

    radio = 5

    area = (radio ** 2) * math.pi

    return area

resultado_2 = area_circulo()
print(resultado_2)


#3) Realiza una funci칩n llamada relacion() que a partir de dos n칰meros cumpla lo siguiente:

#Si el primer n칰mero es mayor que el segundo, debe devolver 1.
#Si el primer n칰mero es menor que el segundo, debe devolver -1.
#Si ambos n칰meros son iguales, debe devolver un 0.

#Comprueba la relaci칩n entre los n칰meros: '5 y 10', '10 y 5' y '5 y 5'

print('\nRELACI칍N ENTRE DOS N칔MEROS')
print('==============================')

def relacion(a, b) :
    
    if a > b :
        return 1

    elif a < b :
        return -1

    elif a == b :
        return 0

while True :

    try :
        num_1 = float(input('Ingresar primer n칰mero: '))
        num_2 = float(input('Ingresar segundo n칰mero: '))

        resultado_3 = relacion(num_1, num_2)

    except ValueError :
        print('N칰mero inv치lido')

    else :
        print(resultado_3)

    exit = input('Desea salir: (s)')
    
    if exit == 's' :
        break


#4) Realiza una funci칩n llamada intermedio() que a partir de dos n칰meros, devuelva su 
# punto intermedio:
#Ayuda: El n칰mero intermedio de dos n칰meros corresponde a la suma de los dos 
# n칰meros dividida entre 2

#Comprueba el punto intermedio entre -12 y 24

print('\nMEDIA DE DOS N칔MEROS')
print('========================')

def intermedio(a, b) :

    medio = (a + b) / 2

    return medio

while True :

    try :
        num_1 = float(input('Ingresar primer n칰mero: '))
        num_2 = float(input('Ingresar segundo n칰mero: '))

        resultado_3 = intermedio(num_1, num_2)

    except ValueError :
        print('N칰mero inv치lido')

    else :
        print(resultado_3)

    exit = input('Desea salir: (s)')
    
    if exit == 's' :
        break

#5) Realiz치 una funci칩n llamada recortar() que reciba tres par치metros. El primero es el 
# n칰mero a recortar, el segundo es el l칤mite inferior y el tercero el l칤mite superior. 
# La funci칩n tendr치 que cumplir lo siguiente:

#Devolver el l칤mite inferior si el n칰mero es menor que 칠ste
#Devolver el l칤mite superior si el n칰mero es mayor que 칠ste.
#Devolver el n칰mero sin cambios si no se supera ning칰n l칤mite.
#Comprueba el resultado de recortar 15 entre los l칤mites 0 y 10

print('\nRECORTAR N칔MEROS')
print('========================')

def recortar(a, b, c) :
    if a < b :
        return b
    elif a > c:
        return c
    else :
        return a


while True:

    try :

        num_recortar = float(input('Ingresar n칰mero a recortar: '))
        lim_inferior = float(input('Ingresar l칤mite inferior: '))
        lim_superior = float(input('Ingresar l칤mite superior: '))

        resultado_3 = recortar(num_recortar, lim_inferior, lim_superior)

    except ValueError :
        print('N칰mero inv치lido')

    else :
        print(resultado_3)
        break

#6) Realiza una funci칩n separar() que tome una lista de n칰meros enteros y devuelva dos 
# listas ordenadas. La primera con los n칰meros pares, y la segunda con los n칰meros 
# impares:
# Ayuda: Para ordenar una lista autom치ticamente puedes usar el m칠todo .sort()

print('\nRECORTAR N칔MEROS')
print('========================')

lista_1 = [3, 4, 8, 2, 9]

def separar(lista) :

    lista_par = []
    lista_impar = []
    lista.sort()
        
    for n in lista :
            
        if n%2 == 0 :
            lista_par.append(n)
        else :
            lista_impar.append(n)
    
    print(f'La lista de n칰meros pares es: {lista_par}')
    print(f'La lista de n칰meros impares es: {lista_impar}')

separar(lista_1)